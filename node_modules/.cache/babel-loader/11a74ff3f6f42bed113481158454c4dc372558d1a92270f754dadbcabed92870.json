{"ast":null,"code":"// src/services/api.js\n// Replace with your actual Render backend URL\nconst API_BASE_URL = 'https://your-flask-app.onrender.com';\nexport const predictMathScore = async studentData => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/predict`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(studentData)\n    });\n\n    // Get response as text first to handle both HTML and JSON\n    const responseText = await response.text();\n\n    // Try to parse as JSON\n    try {\n      const data = JSON.parse(responseText);\n      if (!response.ok) {\n        throw new Error(data.error || `Server error: ${response.status}`);\n      }\n      return data;\n    } catch (jsonError) {\n      // If parsing as JSON fails, it's probably HTML\n      console.warn('Server returned HTML instead of JSON');\n\n      // Try to extract prediction from HTML (temporary workaround)\n      const tempDiv = document.createElement('div');\n      tempDiv.innerHTML = responseText;\n      const resultElement = tempDiv.querySelector('.results');\n      if (resultElement) {\n        const prediction = parseFloat(resultElement.textContent);\n        if (!isNaN(prediction)) {\n          return {\n            prediction: prediction\n          };\n        }\n      }\n      throw new Error('Server returned an unexpected response format. Please check your backend.');\n    }\n  } catch (error) {\n    console.error('Error calling prediction API:', error);\n    if (error.message.includes('Failed to fetch')) {\n      throw new Error('Cannot connect to the prediction server. Please check if the backend is running.');\n    }\n    throw error;\n  }\n};","map":{"version":3,"names":["API_BASE_URL","predictMathScore","studentData","response","fetch","method","headers","body","JSON","stringify","responseText","text","data","parse","ok","Error","error","status","jsonError","console","warn","tempDiv","document","createElement","innerHTML","resultElement","querySelector","prediction","parseFloat","textContent","isNaN","message","includes"],"sources":["C:/Users/91938/OneDrive/Desktop/Projects/ml-app-frontend/src/services/api.js"],"sourcesContent":["// src/services/api.js\r\n// Replace with your actual Render backend URL\r\nconst API_BASE_URL = 'https://your-flask-app.onrender.com';\r\n\r\nexport const predictMathScore = async (studentData) => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/predict`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(studentData)\r\n    });\r\n\r\n    // Get response as text first to handle both HTML and JSON\r\n    const responseText = await response.text();\r\n    \r\n    // Try to parse as JSON\r\n    try {\r\n      const data = JSON.parse(responseText);\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(data.error || `Server error: ${response.status}`);\r\n      }\r\n      \r\n      return data;\r\n    } catch (jsonError) {\r\n      // If parsing as JSON fails, it's probably HTML\r\n      console.warn('Server returned HTML instead of JSON');\r\n      \r\n      // Try to extract prediction from HTML (temporary workaround)\r\n      const tempDiv = document.createElement('div');\r\n      tempDiv.innerHTML = responseText;\r\n      const resultElement = tempDiv.querySelector('.results');\r\n      \r\n      if (resultElement) {\r\n        const prediction = parseFloat(resultElement.textContent);\r\n        if (!isNaN(prediction)) {\r\n          return { prediction: prediction };\r\n        }\r\n      }\r\n      \r\n      throw new Error('Server returned an unexpected response format. Please check your backend.');\r\n    }\r\n  } catch (error) {\r\n    console.error('Error calling prediction API:', error);\r\n    if (error.message.includes('Failed to fetch')) {\r\n      throw new Error('Cannot connect to the prediction server. Please check if the backend is running.');\r\n    }\r\n    throw error;\r\n  }\r\n};"],"mappings":"AAAA;AACA;AACA,MAAMA,YAAY,GAAG,qCAAqC;AAE1D,OAAO,MAAMC,gBAAgB,GAAG,MAAOC,WAAW,IAAK;EACrD,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,YAAY,UAAU,EAAE;MACtDK,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,WAAW;IAClC,CAAC,CAAC;;IAEF;IACA,MAAMQ,YAAY,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;;IAE1C;IACA,IAAI;MACF,MAAMC,IAAI,GAAGJ,IAAI,CAACK,KAAK,CAACH,YAAY,CAAC;MAErC,IAAI,CAACP,QAAQ,CAACW,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAACH,IAAI,CAACI,KAAK,IAAI,iBAAiBb,QAAQ,CAACc,MAAM,EAAE,CAAC;MACnE;MAEA,OAAOL,IAAI;IACb,CAAC,CAAC,OAAOM,SAAS,EAAE;MAClB;MACAC,OAAO,CAACC,IAAI,CAAC,sCAAsC,CAAC;;MAEpD;MACA,MAAMC,OAAO,GAAGC,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC;MAC7CF,OAAO,CAACG,SAAS,GAAGd,YAAY;MAChC,MAAMe,aAAa,GAAGJ,OAAO,CAACK,aAAa,CAAC,UAAU,CAAC;MAEvD,IAAID,aAAa,EAAE;QACjB,MAAME,UAAU,GAAGC,UAAU,CAACH,aAAa,CAACI,WAAW,CAAC;QACxD,IAAI,CAACC,KAAK,CAACH,UAAU,CAAC,EAAE;UACtB,OAAO;YAAEA,UAAU,EAAEA;UAAW,CAAC;QACnC;MACF;MAEA,MAAM,IAAIZ,KAAK,CAAC,2EAA2E,CAAC;IAC9F;EACF,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdG,OAAO,CAACH,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;IACrD,IAAIA,KAAK,CAACe,OAAO,CAACC,QAAQ,CAAC,iBAAiB,CAAC,EAAE;MAC7C,MAAM,IAAIjB,KAAK,CAAC,kFAAkF,CAAC;IACrG;IACA,MAAMC,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}