{"ast":null,"code":"// src/services/api.js\n// Replace with your actual Render backend URL\nconst API_BASE_URL = 'https://your-flask-app.onrender.com';\nexport const predictMathScore = async studentData => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/predict`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(studentData)\n    });\n    if (!response.ok) {\n      // Try to get error message from response\n      let errorMessage = `Server error: ${response.status}`;\n      try {\n        const errorData = await response.json();\n        if (errorData.error) {\n          errorMessage = errorData.error;\n        }\n      } catch (e) {\n        // If response is not JSON, use status text\n        errorMessage = response.statusText || `Server error: ${response.status}`;\n      }\n      throw new Error(errorMessage);\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error calling prediction API:', error);\n    if (error.message.includes('Failed to fetch')) {\n      throw new Error('Cannot connect to the prediction server. Please check if the backend is running.');\n    }\n    throw error;\n  }\n};\n\n// Health check function\nexport const checkHealth = async () => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/health`);\n    return response.ok;\n  } catch (error) {\n    console.error('Health check failed:', error);\n    return false;\n  }\n};","map":{"version":3,"names":["API_BASE_URL","predictMathScore","studentData","response","fetch","method","headers","body","JSON","stringify","ok","errorMessage","status","errorData","json","error","e","statusText","Error","data","console","message","includes","checkHealth"],"sources":["C:/Users/91938/OneDrive/Desktop/Projects/ml-app-frontend/src/services/api.js"],"sourcesContent":["// src/services/api.js\r\n// Replace with your actual Render backend URL\r\nconst API_BASE_URL = 'https://your-flask-app.onrender.com';\r\n\r\nexport const predictMathScore = async (studentData) => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/predict`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(studentData)\r\n    });\r\n\r\n    if (!response.ok) {\r\n      // Try to get error message from response\r\n      let errorMessage = `Server error: ${response.status}`;\r\n      try {\r\n        const errorData = await response.json();\r\n        if (errorData.error) {\r\n          errorMessage = errorData.error;\r\n        }\r\n      } catch (e) {\r\n        // If response is not JSON, use status text\r\n        errorMessage = response.statusText || `Server error: ${response.status}`;\r\n      }\r\n      throw new Error(errorMessage);\r\n    }\r\n\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error calling prediction API:', error);\r\n    if (error.message.includes('Failed to fetch')) {\r\n      throw new Error('Cannot connect to the prediction server. Please check if the backend is running.');\r\n    }\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Health check function\r\nexport const checkHealth = async () => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/health`);\r\n    return response.ok;\r\n  } catch (error) {\r\n    console.error('Health check failed:', error);\r\n    return false;\r\n  }\r\n};"],"mappings":"AAAA;AACA;AACA,MAAMA,YAAY,GAAG,qCAAqC;AAE1D,OAAO,MAAMC,gBAAgB,GAAG,MAAOC,WAAW,IAAK;EACrD,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,YAAY,UAAU,EAAE;MACtDK,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,WAAW;IAClC,CAAC,CAAC;IAEF,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE;MAChB;MACA,IAAIC,YAAY,GAAG,iBAAiBR,QAAQ,CAACS,MAAM,EAAE;MACrD,IAAI;QACF,MAAMC,SAAS,GAAG,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC;QACvC,IAAID,SAAS,CAACE,KAAK,EAAE;UACnBJ,YAAY,GAAGE,SAAS,CAACE,KAAK;QAChC;MACF,CAAC,CAAC,OAAOC,CAAC,EAAE;QACV;QACAL,YAAY,GAAGR,QAAQ,CAACc,UAAU,IAAI,iBAAiBd,QAAQ,CAACS,MAAM,EAAE;MAC1E;MACA,MAAM,IAAIM,KAAK,CAACP,YAAY,CAAC;IAC/B;IAEA,MAAMQ,IAAI,GAAG,MAAMhB,QAAQ,CAACW,IAAI,CAAC,CAAC;IAClC,OAAOK,IAAI;EACb,CAAC,CAAC,OAAOJ,KAAK,EAAE;IACdK,OAAO,CAACL,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;IACrD,IAAIA,KAAK,CAACM,OAAO,CAACC,QAAQ,CAAC,iBAAiB,CAAC,EAAE;MAC7C,MAAM,IAAIJ,KAAK,CAAC,kFAAkF,CAAC;IACrG;IACA,MAAMH,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMQ,WAAW,GAAG,MAAAA,CAAA,KAAY;EACrC,IAAI;IACF,MAAMpB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,YAAY,SAAS,CAAC;IACtD,OAAOG,QAAQ,CAACO,EAAE;EACpB,CAAC,CAAC,OAAOK,KAAK,EAAE;IACdK,OAAO,CAACL,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5C,OAAO,KAAK;EACd;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}